To solve the problem optimally, we need to build up the height at `pos-1-2` to 3 by placing blocks, while ensuring we meet the action constraints (e.g., the robot can only place a block at a neighboring position of the same height).

Here's the sequence of actions:

1. **CreateBlockAtDepot(Robot)**
   - The robot creates a block at the depot (`pos-2-0`) and now has one block.
2. **Move(Robot, pos-2-0, pos-2-1)**
   - The robot moves from the depot (`pos-2-0`) to `pos-2-1` at the same height.
3. **Move(Robot, pos-2-1, pos-2-2)**
   - The robot moves from `pos-2-1` to `pos-2-2` at the same height.
4. **PlaceBlock(Robot, pos-1-2)**
   - From `pos-2-2`, the robot places the block at `pos-1-2` (height at both positions is 0).
   - Height at `pos-1-2` is now 1.
5. **Move(Robot, pos-2-2, pos-2-1)**
   - The robot moves back to `pos-2-1`.
6. **Move(Robot, pos-2-1, pos-2-0)**
   - The robot returns to the depot (`pos-2-0`).
7. **CreateBlockAtDepot(Robot)**
   - The robot creates another block at the depot and now has one block.
8. **Move(Robot, pos-2-0, pos-2-1)**
   - The robot moves to `pos-2-1`.
9. **Move(Robot, pos-2-1, pos-1-1)**
   - The robot moves to `pos-1-1`.
10. **PlaceBlock(Robot, pos-1-1)**
    - From `pos-1-1`, the robot places the block at its neighboring position `pos-1-1` (effectively building up `pos-1-1` to height 1).
    - Height at `pos-1-1` is now 1.
11. **Move(Robot, pos-1-1, pos-1-0)**
    - The robot moves to `pos-1-0`.
12. **Move(Robot, pos-1-0, pos-2-0)**
    - The robot returns to the depot.
13. **CreateBlockAtDepot(Robot)**
    - The robot creates another block and has one block.
14. **Move(Robot, pos-2-0, pos-1-0)**
    - The robot moves to `pos-1-0`.
15. **Move(Robot, pos-1-0, pos-1-1)**
    - The robot moves to `pos-1-1` (which is now at height 1).
16. **MoveUp(Robot, pos-1-1, pos-1-2)**
    - The robot moves up from `pos-1-1` (height 1) to `pos-1-2` (height 1).
17. **PlaceBlock(Robot, pos-1-2)**
    - From `pos-1-2`, the robot cannot place a block at its own position, but can place it at a neighboring position. However, since we need to increase the height at `pos-1-2`, and our goal is to have height 3 there, we need to carefully adjust our strategy.

At this point, we notice that building up `pos-1-1` to height 1 doesn't help us reach a neighboring position at height 2. Therefore, we adjust our plan:

16. **PlaceBlock(Robot, pos-1-1)**
    - From `pos-1-1`, the robot places the block at `pos-1-1` again, increasing its height to 2.
    - Height at `pos-1-1` is now 2.
17. **MoveUp(Robot, pos-1-1, pos-1-2)**
    - The robot moves up from `pos-1-1` (height 2) to `pos-1-2` (height 2).
18. **Return to Depot**
    - The robot needs to return to the depot to get another block.
    - **MoveDown(Robot, pos-1-2, pos-1-1)**
    - **MoveDown(Robot, pos-1-1, pos-1-0)**
    - **Move(Robot, pos-1-0, pos-2-0)**
19. **CreateBlockAtDepot(Robot)**
    - The robot creates the final block needed.
20. **Move(Robot, pos-2-0, pos-1-0)**
21. **Move(Robot, pos-1-0, pos-1-1)**
22. **MoveUp(Robot, pos-1-1, pos-1-2)**
    - The robot moves up to `pos-1-2`, now at height 2.
23. **PlaceBlock(Robot, pos-1-2)**
    - From `pos-1-2`, with both the robot's position and `pos-1-2` at height 2, the robot places the block at `pos-1-2`.
    - Height at `pos-1-2` is now 3.

**Final State:**
- The height at `pos-1-2` is 3, meeting the goal.
- The robot does not have any unplaced blocks.
- The plan uses the minimal number of actions by strategically building up `pos-1-1` to allow the robot to reach the required height at `pos-1-2`.

**Summary of Optimal Plan:**

1. Create block at depot and move to `pos-2-2` to place first block at `pos-1-2` (height 1).
2. Return to depot, create block, move to `pos-1-1`, and build up `pos-1-1` to height 2.
3. Use the increased height at `pos-1-1` to move up to `pos-1-2` and place the remaining blocks to reach height 3.

This plan efficiently utilizes the robot's abilities to build structures and minimizes the number of actions needed to achieve the goal.